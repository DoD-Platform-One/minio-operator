{{- if .Values.tenantPatchJob.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-bb-tenant-patch
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bb-{{ .Release.Name }}-tenant-patch
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
rules:
- apiGroups: ["minio.min.io"]
  resources: ["tenants"]
  verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-bb-tenant-patch
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bb-{{ .Release.Name }}-tenant-patch
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-bb-tenant-patch
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: bb-{{ .Release.Name }}-tenant-patch
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 480
  template:
    metadata:
      name: bb-{{ .Release.Name }}-tenant-patch
      annotations:
        sidecar.istio.io/inject: 'false'
      labels:
        app.kubernetes.io/name: bigbang-minio-operator-tenant-patch-job
    spec:
      serviceAccountName: {{ .Release.Name }}-bb-tenant-patch
      containers:
        - name: bb-{{ .Release.Name }}-tenant-patch
          image: {{ $.Values.tenantPatchJob.image.repository }}:{{ $.Values.tenantPatchJob.image.tag }}
          command:
            - /bin/bash
            - -c
            - |
              kubectl get tenants -A >& /dev/null
              if [[ $? != 0 ]]; then
                echo "no tenants were found.  no patches are necessary :D"
                exit 0
              fi
              
              for t in $(kubectl get tenants -A -o json | jq -r '.items[] | .metadata.namespace + ":" + .metadata.name'  | xargs); do
                arr=(${t//:/' '})
                namespace=${arr[0]}
                name=${arr[1]}
                
                echo "Testing tenant namespace=$namespace name=$name"
                kubectl get tenants -n $namespace $name >& /dev/null
                if [[ -z $(kubectl get tenants -n $namespace $name -o jsonpath='{.spec.pools[0].securityContext.runAsNonRoot}') ]]; then
                  echo "  patch required to add securityContext.runAsNonRoot: true"
                  kubectl patch tenants -n $namespace $name --type=json -p='[{"op":"add","path":"/spec/pools/0/securityContext/runAsNonRoot", "value":true}]'
                else
                  echo "  existing securityContext.runAsNonRoot was found; no patch necessary :D"
                fi
                echo
                  
              done             

          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 100m
              memory: 512Mi
      restartPolicy: OnFailure
      {{- if .Values.tenantPatchJob.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.tenantPatchJob.image.pullSecrets }}
      - name: {{ . }}
      {{- end }}
      {{- end }}
{{- end }}
